<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwg
        JC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIy
        MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCADcAWADASIAAhEBAxEB/8QA
        HwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh
        MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
        V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
        x8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQF
        BgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAV
        YnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
        hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq
        8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDm2jIpuw1bIJ60nl5r9DufMFbbTttTGKjZRcCILTttSbKXZTER
        hadtp4Wl20AMC0u2pNtKFouIi20u2pdtLt5pXAi20bal20u2i4EIWl21LtpdtFwIttG2pdtG2i4EW2l2
        1Lto20rgRbaNtTbaTbRcCLbRtqbbRtouBDto21NtpNtFwIdtG2pttG2i4EO2k21Nto207gQbaNtTbKTb
        RcCHbSban20m2i4EO2k21Nto20XAgK0bam20m2mBDtpCtTbaTbQBDtpNtT7aTbQIh20oWpdtKFp3Bi4x
        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
        iRED3x1PNG4hWAOB/wDXouOx/9k=
</value>
  </data>
</root>